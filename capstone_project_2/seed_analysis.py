# -*- coding: utf-8 -*-
"""Seed_Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ud84ib7oNkKz0835RRLjFq1JCBbxC_lr
"""

import pandas as pd
import matplotlib.pylab as plt
import time
import string
import spacy
from collections import Counter
import matplotlib.pylab as plt
from oauth2client.client import GoogleCredentials
from googleapiclient import discovery
import matplotlib.pyplot as plt
import seaborn as sns
from wordcloud import WordCloud

class Visualization:
  # Visualize the texts before and after cleaning texts
  
  def __init__(self, df):
    self.df = df
    
  def number_viz(self):
    # Before cleaning the texts, we visualize the sentence length in the original abstracts.  
    self.df['len_sentence'] = self.df['abstract'].apply(lambda x: len(x.split('. ')))    
    len_sen = self.df.groupby('len_sentence')['title'].count().reset_index()
    sns.barplot(data=len_sen, x='len_sentence', y='title')
    plt.ylabel('Number of Patents')
    plt.xlabel('Length of Sentence')
    plt.title('Distribution of Sentence Length')
    plt.show()
    
    # Visualize the word number of abstract before cleaning the texts    
    self.df['word_count_abs'] = self.df['abstract'].apply(lambda x: len(x.strip(' '))) 
    sns.boxplot(data=self.df, y='word_count_abs')
    plt.ylabel('Number of Words')
    plt.title('Distribution of Words in Abstract')
    plt.show()
    
    # Visuaize the word number of title before cleaning the texts
    self.df['word_count_tt'] = self.df['title'].apply(len)
    sns.boxplot(data=self.df, y='word_count_tt')
    plt.ylabel('Number of Words')
    plt.title('Distribution of Words in Title')
    plt.show()
    
  def words_abstract_viz(self, column):    
    # Visualize the abstracts before or after cleaning the texts 
    
    # Display the top words in Wordcloud
    all_text = ' '.join([text for text in self.df[column]])
    wordcloud = WordCloud(width=800, height=500, random_state=21, max_font_size=110).generate(all_text)
    plt.figure(figsize=(15, 12))
    plt.imshow(wordcloud, interpolation="bilinear")
    plt.axis('off')
    plt.title('Top Words in Abstract')
    plt.show()
    
    # Display the top 10 words in abstract    
    counts = Counter(' '.join(self.df[column]).split())
    word_count = pd.DataFrame(counts.most_common(10), columns=['Word', 'Count'])
    sns.barplot(data=word_count, x='Word', y='Count')
    plt.xticks(rotation=45)
    plt.title('Top Words in Abstract')
    plt.show()