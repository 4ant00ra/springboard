# -*- coding: utf-8 -*-
"""Data_Preparation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10uRBILcKIcpX8uSNvXZUq6kIhYIRu_Lc
"""

from __future__ import print_function
from google.cloud import bigquery
import pandas as pd
import matplotlib.pylab as plt
from oauth2client.client import GoogleCredentials
from googleapiclient import discovery
import uuid
import time
from google.oauth2 import service_account
from pandas.io import gbq

class data_preparation:
  
  # Define project id and dataset to be used in Google Console 
  
  PROJECT_ID = "patent-241915"
  DEST_DATASET = 'claims_analysis'
  
  def __init__(self, PROJECT_ID, DEST_DATASET, num_antiseed=20000):
    # Define the antiseed size as 20000 just for calculationã€‚ You can change any number. But it is recommened to 10000~60000
    self.PROJECT_ID = PROJECT_ID
    self.DEST_DATASET = DEST_DATASET
    self.num_antiseed = num_antiseed
    
  
  def load_seed(self):
    # Search seed patents from bigquery
    seed_query = """
    SELECT DISTINCT
    p.publication_number,
    p.title,
    p.abstract
    FROM `patent-241915.claims_analysis.seed_patent` AS my_data
    LEFT JOIN
    `patents-public-data.google_patents_research.publications` AS p ON my_data.id = p.publication_number
    WHERE
    p.country = "United States"
    AND
    p.abstract != ''
    """
    
    seed_patents_df = gbq.read_gbq(
            query=seed_query,
            project_id=self.PROJECT_ID,
            verbose=False,
            dialect='standard')
    
    return seed_patents_df
  
  def load_antiseed(self):
    # Search antiseed. You can find change "algorithm" to other words. We just want to pull out the dataset with opposite polarity of Seed patents.
    antiseed_query = """
      SELECT DISTINCT
      p.publication_number,
      p.title,
      p.abstract
      FROM `patents-public-data.google_patents_research.publications` AS p 
      WHERE
      p.country = "United States"
      AND 
      p.abstract LIKE "%algorithm%" 
      AND
      p.abstract NOT LIKE "%purify water%"
      AND
      p.abstract NOT LIKE "%filter water%"
      AND
      p.abstract != ''
      """
    antiseed_patents_df = gbq.read_gbq(
            query=antiseed_query,
            project_id=self.PROJECT_ID,
            verbose=False,
            dialect='standard')
    return antiseed_patents_df[:self.num_antiseed]
  
  def search_expanded(self, word_query):
    # This is search single string in abstract. 
    expanded_query = """
            SELECT DISTINCT
            p.publication_number,
            p.title,
            p.abstract
            FROM `patents-public-data.google_patents_research.publications` AS p 
            WHERE
            p.country = "United States"
            AND 
            p.abstract LIKE @abstract
            AND 
            p.abstract != ''
           """
    word_query = "%"+ word_query + "%"
    query_params = [
        bigquery.ScalarQueryParameter("abstract", "STRING", word_query),
        ]
    client = bigquery.Client()
    job_config = bigquery.QueryJobConfig()
    job_config.priority = bigquery.QueryPriority.BATCH
    job_config.query_parameters = query_params
    query_job = client.query(
        expanded_query,
    # Location must match that of the dataset(s) referenced in the query.
        location="US",
        job_config=job_config,
    )
    
    expanded_patent = query_job.to_dataframe()
    
    return expanded_patent
  
  def load_expanded(self, keywords_list):
    expand_seed = []
    for keyword in keywords_list:
      data = self.search_expanded(keyword)
      print('bigquery is finished.')
      data['keyword'] = keyword
      expand_seed.append(data)
      print('appending data')
    
    return expand_seed